<?php

namespace AGIL\DefaultBundle\Repository;

use AGIL\DefaultBundle\Entity\AgilTag;
use AGIL\ProfileBundle\Entity\AgilSkill;
use Doctrine\ORM\EntityRepository;
use InvalidArgumentException;

/**
 * AgilTagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgilTagRepository extends EntityRepository
{
	/**
	 * @param $firstLetter String Le premier caractère du tag
	 * @return String Un texte en JSON avec la liste des tags correspondants
	 * Sert à trouver les tags dont la première lettre est $firstLetter
	 */
	function getTagsList($firstLetter) {
		// On créé la requête
		$request = $this->createQueryBuilder('t')->where('t.tagName LIKE :string')->setParameter('string', $firstLetter.'%');
		// On l'execute et on retourne le résultat
		/* /!\ C'est une liste d'objet de type AgilTag /!\ */
		return $request->getQuery()->getResult();
	}


	/**
	 * Recherche des sujets de forum par rapport à $arrayTag,
	 * trié par ordre de date décroissant, avec la méthode OR
	 * @param $arrayTag
	 * @return array
	 */
	public function getOrSubjectByTags($arrayTag){

		$query = $this->_em->createQueryBuilder();
		$query->select('sub.forumSubjectTitle','sub.forumSubjectPostDate','sub.forumSubjectId')
				->distinct()
				->from('AGIL\ForumBundle\Entity\AgilForumSubject','sub')
				->leftJoin('sub.tags','tag')
				->andWhere('tag.tagName IN (:tagList)')
				->setParameter('tagList', $arrayTag)
				->orderBy('sub.forumSubjectPostDate','desc');
		;

		return $query->setFirstResult(0)->setMaxResults(5)->getQuery()->getResult();
	}


	/**
	 * Recherche des sujets de forum par rapport à $arrayTag,
	 * trié par ordre de date décroissant, avec la méthode AND
	 * @param $arrayTag
	 * @return array
	 */
	public function getAndSubjectByTags($arrayTag){

		$subQuery = $this->_em->createQueryBuilder();
		$query = $this->_em->createQueryBuilder();

		$subQuery->select('subj.forumSubjectId')
				->from('AGIL\ForumBundle\Entity\AgilForumSubject','subj')
				->leftJoin('subj.tags','tag')
				->andWhere('tag.tagName IN (:tagList)')
				->groupBy('subj.forumSubjectId HAVING count(DISTINCT tag.tagName) >= :count')
		;

		$query->select('sub.forumSubjectId','sub.forumSubjectTitle','sub.forumSubjectPostDate','sub')
				->from('AGIL\ForumBundle\Entity\AgilForumSubject','sub')
				->where($query->expr()->In('sub.forumSubjectId', $subQuery->getDQL()))
				->orderBy('sub.forumSubjectPostDate','desc')
		;

		$query->setParameter('count', count($arrayTag));
		$query->setParameter('tagList', $arrayTag);

		return $query->setFirstResult(0)->setMaxResults(5)->getQuery()->getResult();
	}


	/**
	 * Recherche des évènements du hall par rapport à $arrayTag,
	 * trié par ordre de date décroissant, avec la méthode OR
	 * @param $arrayTag
	 * @return array
	 */
	public function getOrEventByTags($arrayTag){

		$query = $this->_em->createQueryBuilder();
		$query->select('event.eventTitle','event.eventDate','event.eventId')
				->distinct()
				->from('AGIL\HallBundle\Entity\AgilEvent','event')
				->leftJoin('event.tags','tag')
				->andWhere('tag.tagName IN (:tagList)')
				->setParameter('tagList', $arrayTag)
				->orderBy('event.eventDate','desc');
		;

		return $query->setFirstResult(0)->setMaxResults(5)->getQuery()->getResult();
	}

	/**
	 * Recherche des évènements du hall par rapport à $arrayTag,
	 * trié par ordre de date décroissant, avec la méthode AND
	 * @param $arrayTag
	 * @return array
	 */
	public function getAndEventByTags($arrayTag){

		$subQuery = $this->_em->createQueryBuilder();
		$query = $this->_em->createQueryBuilder();

		$subQuery->select('evt.eventId')
				->from('AGIL\HallBundle\Entity\AgilEvent','evt')
				->leftJoin('evt.tags','tag')
				->andWhere('tag.tagName IN (:tagList)')
				->groupBy('evt.eventId HAVING count(DISTINCT tag.tagName) >= :count')
		;

		$query->select('event.eventId','event.eventTitle','event.eventDate','event')
				->from('AGIL\HallBundle\Entity\AgilEvent','event')
				->where($query->expr()->In('event.eventId', $subQuery->getDQL()))
				->orderBy('event.eventDate','desc')
		;

		$query->setParameter('count', count($arrayTag));
		$query->setParameter('tagList', $arrayTag);

		return $query->setFirstResult(0)->setMaxResults(5)->getQuery()->getResult();
	}


}
